function a_star_search_romania_user_input()
    % Define the graph using adjacency matrix
    cities = {'Arad', 'Zerind', 'Oradea', 'Sibiu', 'Timisoara', 'Lugoj', ...
              'Mehadia', 'Dobreta', 'Craiova', 'Rimnicu Vilcea', 'Pitesti', ...
              'Fagaras', 'Bucharest', 'Giurgiu', 'Urziceni', 'Hirsova', ...
              'Eforie', 'Vaslui', 'Iasi', 'Neamt'};

    distances = [  0  75   0 140 118   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0;
                  75   0  71   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0;
                   0  71   0 151   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0;
                 140   0 151   0   0   0   0   0   0  80   0  99   0   0   0   0   0   0   0   0;
                 118   0   0   0   0 111   0   0   0   0   0   0   0   0   0   0   0   0   0   0;
                   0   0   0   0 111   0  70   0   0   0   0   0   0   0   0   0   0   0   0   0;
                   0   0   0   0   0  70   0  75   0   0   0   0   0   0   0   0   0   0   0   0;
                   0   0   0   0   0   0  75   0 120   0   0   0   0   0   0   0   0   0   0   0;
                   0   0   0   0   0   0   0 120   0 146 138   0   0   0   0   0   0   0   0   0;
                   0   0   0  80   0   0   0   0 146   0  97   0   0   0   0   0   0   0   0   0;
                   0   0   0   0   0   0   0   0 138  97   0   0 101   0   0   0   0   0   0   0;
                   0   0   0  99   0   0   0   0   0   0   0   0 211   0   0   0   0   0   0   0;
                   0   0   0   0   0   0   0   0   0   0 101 211   0  90  85   0   0   0   0   0;
                   0   0   0   0   0   0   0   0   0   0   0   0  90   0   0   0   0   0   0   0;
                   0   0   0   0   0   0   0   0   0   0 101   0  85   0  98   0   0 142   0   0;
                   0   0   0   0   0   0   0   0   0   0 101   0  85   0  98  86   0 142   0   0;
                   0   0   0   0   0   0   0   0   0   0 101   0  85   0  98  86   0 142   0   0;
                   0   0   0   0   0   0   0   0   0   0 101   0  85   0  98  86   0 142   0   0;
                   0   0   0   0   0   0   0   0   0   0 101   0  85   0  98   0   0 142   0   0;
                   0   0   0   0   0   0   0   0   0   0 101   0  85   0  98   0   0 142   0   0];

    heuristic = [366, 374, 380, 253, 329, 244, 241, 242, 160, 193, 98, 178, 0, 77, 80, 151, 161, 199, 226, 234];

    % Get user input for the starting city
    prompt = 'Enter the starting city: ';
    startCity = input(prompt, 's');

    % Check if the input city is valid
    if ~ismember(startCity, cities)
        disp('Invalid city name. Please enter a valid city from the list.');
        disp(cities);
        return;
    end

    start = startCity;
    goal = 'Bucharest';

    % Find the shortest path using A* search
    [path, pathLength] = a_star_search(cities, distances, heuristic, start, goal);

    % Display the results
    disp('Shortest path:');
    disp(path);
    disp(['Path length: ', num2str(pathLength)]);
end

function [path, pathLength] = a_star_search(cities, distances, heuristic, start, goal)
    numCities = length(cities);
    openSet = [find(strcmp(cities, start))];
    cameFrom = zeros(1, numCities);
    gScore = inf(1, numCities);
    gScore(openSet) = 0;
    fScore = inf(1, numCities);
    fScore(openSet) = heuristic(openSet);

    while ~isempty(openSet)
        [~, idx] = min(fScore(openSet));
        current = openSet(idx);

        if strcmp(cities{current}, goal)
            path = reconstruct_path(cameFrom, current, cities);
            pathLength = gScore(current);
            return;
        end

        openSet(idx) = [];
        neighbors = find(distances(current, :) > 0);

        for neighbor = neighbors
            tentative_gScore = gScore(current) + distances(current, neighbor);

            if tentative_gScore < gScore(neighbor)
                cameFrom(neighbor) = current;
                gScore(neighbor) = tentative_gScore;
                fScore(neighbor) = gScore(neighbor) + heuristic(neighbor);

                if ~ismember(neighbor, openSet)
                    openSet = [openSet, neighbor];
                end
            end
        end
    end

    path = {};
    pathLength = inf;
end

function path = reconstruct_path(cameFrom, current, cities)
    totalPath = [current];
    while cameFrom(current) ~= 0
        current = cameFrom(current);
        totalPath = [current, totalPath];
    end
    path = cities(totalPath);
end
